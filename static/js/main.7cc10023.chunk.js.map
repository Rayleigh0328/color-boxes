{"version":3,"sources":["component/color-box/color-box.component.jsx","helper/helper.jsx","component/color-box-container/color-box-container.component.jsx","App.js","serviceWorker.js","index.js"],"names":["ColorBox","props","handleClick","e","onClick","index","this","red","green","blue","className","style","backgroundColor","Component","generateRandomIntOpenUpperBound","ub","Math","floor","random","generateRandomColor","generateColorArray","len","result","length","push","ColorBoxContainer","clickColorBox","newBoxArray","state","boxArray","map","box","i","setState","regenerate","numBox","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAIqBA,G,wDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAGRC,YAAc,SAACC,GACb,EAAKF,MAAMG,QAAQ,EAAKH,MAAMI,QALd,E,qDAQT,IAAD,EACqBC,KAAKL,MAAzBM,EADD,EACCA,IAAKC,EADN,EACMA,MAAOC,EADb,EACaA,KACnB,OACE,yBACEC,UAAU,WACVC,MAAO,CAACC,gBAAgB,OAAD,OAAQL,EAAR,YAAeC,EAAf,YAAwBC,EAAxB,MACvBL,QAASE,KAAKJ,aAEd,mCAASK,EAAT,IAAeC,EAAf,IAAuBC,EAAvB,U,GAjB8BI,cCHlCC,EAAkC,SAACC,GACrC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAGhCI,EAAsB,WACxB,MACA,CACEZ,IAAKO,EAAgC,KACrCN,MAAOM,EAAgC,KACvCL,KAAMK,EAAgC,OAItCM,EAAqB,SAACC,GAExB,IADA,IAAIC,EAAS,GACNA,EAAOC,OAASF,GACrBC,EAAOE,KAAKL,KAEd,OAAOG,GCbYG,G,wDAKnB,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IAMRyB,cAAgB,SAACrB,GACf,IAAMsB,EAAc,EAAKC,MAAMC,SAASC,KAAK,SAACC,EAAIC,GAAL,OAAYA,IAAI3B,EAAMc,IAAsBY,KACzF,EAAKE,SAAS,CAACJ,SAAWF,KATV,EAYlBO,WAAa,WACX,EAAKD,SAAS,CAACJ,SAAWT,EAAmB,EAAKnB,MAAMkC,WAXxD,EAAKP,MAAQ,CACXC,SAAWT,EAAmB,EAAKnB,MAAMkC,SAH3B,E,qDAgBT,IAAD,OACN,OACE,yBAAKzB,UAAU,qBACb,yBAAKA,UAAU,gBAEbJ,KAAKsB,MAAMC,SAASC,KAAK,SAACC,EAAIC,GAAL,OACvB,kBAAC,EAAD,eACEI,IAAKJ,GACDD,EAFN,CAGE1B,MAAO2B,EACP5B,QAAS,EAAKsB,qBAKpB,4BAAQtB,QAASE,KAAK4B,YAAtB,4B,GApCuCrB,cAA1BY,EACZY,aAAe,CACpBF,OAAS,GCIEG,MARf,WACE,OACE,6BACE,kBAAC,EAAD,CAAmBH,OAAO,SCKZI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7cc10023.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport \"./color-box.styles.css\";\n\nexport default class ColorBox extends Component {\n  constructor(props){\n    super(props)\n  }\n\n  handleClick = (e) => {\n    this.props.onClick(this.props.index);\n  }\n\n  render(){\n    const {red, green, blue} = this.props;\n    return (\n      <div \n        className=\"ColorBox\" \n        style={{backgroundColor:`rgb(${red},${green},${blue})`}} \n        onClick={this.handleClick}\n      >\n        <p>rgb:({red},{green},{blue})</p>\n      </div>\n    )\n  }\n}","// generate a random int in [0, ub)\nlet generateRandomIntOpenUpperBound = (ub) => {\n  return Math.floor(Math.random() * ub)\n}\n\nlet generateRandomColor = () => {\n  return(\n  {\n    red: generateRandomIntOpenUpperBound(256),\n    green: generateRandomIntOpenUpperBound(256),\n    blue: generateRandomIntOpenUpperBound(256)\n  })\n}\n\nlet generateColorArray = (len) => {\n  var result = [];\n  while (result.length < len){\n    result.push(generateRandomColor());\n  }\n  return result;\n}\n\nexport { generateColorArray , generateRandomColor, generateRandomIntOpenUpperBound };","import React, { Component } from 'react';\nimport ColorBox from '../color-box/color-box.component';\nimport { generateColorArray, generateRandomColor } from '../../helper/helper';\n\nimport \"./color-box-container.styles.css\";\n\nexport default class ColorBoxContainer extends Component {\n  static defaultProps = {\n    numBox : 3\n  }\n\n  constructor(props){\n    super(props);\n    this.state = {\n      boxArray : generateColorArray(this.props.numBox)\n    }\n  }\n\n  clickColorBox = (index) => {\n    const newBoxArray = this.state.boxArray.map( (box,i) => (i===index?generateRandomColor():box) )\n    this.setState({boxArray : newBoxArray})\n  }\n\n  regenerate = () => {\n    this.setState({boxArray : generateColorArray(this.props.numBox)});\n  }\n\n  render(){\n    return (\n      <div className=\"ColorBoxContainer\">\n        <div className=\"ColorBoxList\">\n        {\n          this.state.boxArray.map( (box,i) =>  \n            <ColorBox \n              key={i}\n              {...box} \n              index={i}\n              onClick={this.clickColorBox}\n            /> \n          )\n        }\n        </div>\n        <button onClick={this.regenerate}>Click to regenerate</button>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './App.css';\nimport ColorBoxContainer from './component/color-box-container/color-box-container.component';\n\nfunction App() {\n  return (\n    <div>\n      <ColorBoxContainer numBox='15'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}